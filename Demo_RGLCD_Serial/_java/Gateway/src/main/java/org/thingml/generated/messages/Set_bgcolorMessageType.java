/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated.messages;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import java.util.*;
import java.nio.*;

public class Set_bgcolorMessageType extends EventType {
public Set_bgcolorMessageType(short code) {super("set_bgcolor", code);
}

public Set_bgcolorMessageType() {
super("set_bgcolor", (short) 3);
}

public Event instantiate(final byte color) { return new Set_bgcolorMessage(this, color); }
@Override
public Event instantiate(Map<String, Object> params) {return instantiate((Byte) params.get("color"));
}

/**Instantiates a message from a binary representation*/
@Override
public Event instantiate(byte[] payload, String serialization) {
if (serialization == null || serialization.equals("default")) {
ByteBuffer buffer = ByteBuffer.wrap(payload);
buffer.order(ByteOrder.BIG_ENDIAN);
final short code = buffer.getShort();
if (code == this.code) {
final byte color = buffer.get();
return instantiate(color);
}
return null;
}
//Do NOT remove following comment. Might be used by a serialization plugin
/*BINARY_LOAD*/
return null;
}

/**Instantiates a message from a string representation*/
@Override
public Event instantiate(String payload, String serialization) {
if (serialization == null || serialization.equals("default")) {
final String[] msg = payload.trim().replace(" ", "").replace("\t", "").replace("\n", "").replace("\"", "").replace(")", "").split("[(:,]+");
return parse(msg);
} else if (serialization.equals("json-default")) {
final String[] msg = payload.trim().replace(" ", "").replace("\t", "").replace("\n", "").replace("\"", "").replace("{", "").replace("}", "").split("[:,]+");
return parse(msg);
}
//Do NOT remove following comment. Might be used by a serialization plugin
/*STRING_LOAD*/
return null;
}

private Event parse(String[] msg) {
if (msg.length != 3)
return null;
if ("set_bgcolor".equals(msg[0])) {
if ("color".equals(msg[1])) {
final byte color = Byte.parseByte(msg[2]);
return instantiate(color);
}
}
return null;
}

public class Set_bgcolorMessage extends Event implements java.io.Serializable {

public final byte color;
@Override
public String toString(){
return "set_bgcolor (" + "color: " + color + ")";
}

protected Set_bgcolorMessage(EventType type, final byte color) {
super(type);
this.color = color;
}
@Override
public Event clone() {
return instantiate(this.color);
}/**Serializes a message into a string*/
@Override
public String toString(String serialization) {
if (serialization == null || serialization.equals("default")) {
return toString();
} else if (serialization.equals("json-default")) {return "{\"set_bgcolor\":{\"color\":" + color + "}}";
}
//Do NOT remove following comment. Might be used by a serialization plugin
/*STRING_SAVE*/
return null;
}

/**Serializes a message into a binary format*/
@Override
public byte[] toBytes(String serialization) {
if (serialization == null || serialization.equals("default")) {
ByteBuffer buffer = ByteBuffer.allocate(3);
buffer.order(ByteOrder.BIG_ENDIAN);
buffer.putShort(code);
buffer.put(color);
return buffer.array();
}
//Do NOT remove following comment. Might be used by a serialization plugin
/*BINARY_SAVE*/
return null;
}

}

}

