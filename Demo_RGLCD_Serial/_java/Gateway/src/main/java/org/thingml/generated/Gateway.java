/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Gateway
 **/
public class Gateway extends Component implements IGateway_myPort {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

private Collection<IGateway_myPortClient> myPort_clients = Collections.synchronizedCollection(new LinkedList<IGateway_myPortClient>());
public synchronized void registerOnMyPort(IGateway_myPortClient client){
myPort_clients.add(client);
}

public synchronized void unregisterFromMyPort(IGateway_myPortClient client){
myPort_clients.remove(client);
}

@Override
public synchronized void button_press_via_myPort(byte API_button_press_but_id__var){
receive(button_pressType.instantiate(API_button_press_but_id__var), myPort_port);
}

@Override
public synchronized void button_release_via_myPort(byte API_button_release_but_id__var){
receive(button_releaseType.instantiate(API_button_release_but_id__var), myPort_port);
}

@Override
public synchronized void button_long_press_via_myPort(byte API_button_long_press_but_id__var){
receive(button_long_pressType.instantiate(API_button_long_press_but_id__var), myPort_port);
}

private void sendSet_bgcolor_via_myPort(byte API_set_bgcolor_color__var){
//ThingML send
myPort_port.send(set_bgcolorType.instantiate(API_set_bgcolor_color__var));
//send to other clients
for(IGateway_myPortClient client : myPort_clients){
client.set_bgcolor_from_myPort(API_set_bgcolor_color__var);
}}

//Attributes
//Ports
private Port myPort_port;
//Message types
protected final Button_pressMessageType button_pressType = new Button_pressMessageType();
public Button_pressMessageType getButton_pressType(){
return button_pressType;
}

protected final Button_releaseMessageType button_releaseType = new Button_releaseMessageType();
public Button_releaseMessageType getButton_releaseType(){
return button_releaseType;
}

protected final Button_long_pressMessageType button_long_pressType = new Button_long_pressMessageType();
public Button_long_pressMessageType getButton_long_pressType(){
return button_long_pressType;
}

protected final Set_bgcolorMessageType set_bgcolorType = new Set_bgcolorMessageType();
public Set_bgcolorMessageType getSet_bgcolorType(){
return set_bgcolorType;
}

//CEP Streams
//Empty Constructor
public Gateway() {
super();
}

//Constructor (all attributes)
public Gateway(String name) {
super(name);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getMyPort_port() {
return myPort_port;
}
private CompositeState buildGateway_behavior(){
final List<AtomicState> states_Gateway_behavior = new ArrayList<AtomicState>();
final AtomicState state_Gateway_behavior_Init = new AtomicState("Init")
;
states_Gateway_behavior.add(state_Gateway_behavior_Init);
final List<Region> regions_Gateway_behavior = new ArrayList<Region>();
final List<Handler> transitions_Gateway_behavior = new ArrayList<Handler>();
transitions_Gateway_behavior.add(new InternalTransition("868964689",button_pressType, myPort_port, state_Gateway_behavior_Init){
@Override
public void doExecute(final Event e) {
final Button_pressMessageType.Button_pressMessage button_press = (Button_pressMessageType.Button_pressMessage) e;
System.out.print("button pressed\n");
sendSet_bgcolor_via_myPort((byte) (button_press.but_id));
}

});
final CompositeState state_Gateway_behavior = new CompositeState("behavior", states_Gateway_behavior, state_Gateway_behavior_Init, transitions_Gateway_behavior, regions_Gateway_behavior, false);
return state_Gateway_behavior;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
myPort_port = new Port(PortType.REQUIRED, "myPort", this);
} else {
myPort_port = ((Gateway)root).myPort_port;
}
createCepStreams();if (session == null){
//Init state machine
behavior = buildGateway_behavior();
}
return this;
}

}
